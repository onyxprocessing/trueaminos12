#!/bin/bash

# Define colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Repository URL
REPO_URL="https://github.com/onyxprocessing/TrueAminoStore.git"
REPO_NAME="TrueAminoStore"

echo -e "${CYAN}Preparing TrueAminoStore deployment...${NC}"

# Check if git is installed
if ! command -v git &> /dev/null; then
    echo -e "${RED}Error: Git is not installed. Please install git first.${NC}"
    exit 1
fi

# Check if directory already exists - non-interactive handling
if [ -d "$REPO_NAME" ]; then
    echo -e "${YELLOW}$REPO_NAME directory already exists. Using existing directory.${NC}"
else
    # Clone the repository
    echo -e "${CYAN}Cloning repository from $REPO_URL...${NC}"
    if git clone "$REPO_URL" "$REPO_NAME"; then
        echo -e "${GREEN}Successfully cloned $REPO_NAME repository.${NC}"
    else
        echo -e "${RED}Error: Failed to clone the repository. Please check the URL and your internet connection.${NC}"
        exit 1
    fi
fi

# Set environment variables
export PORT=5000
export HOST=0.0.0.0
export NODE_ENV=production

# Generate a random string for SESSION_SECRET if not already set
if [ -z "$SESSION_SECRET" ]; then
    SESSION_SECRET=$(openssl rand -hex 32)
    echo -e "${YELLOW}Generated new SESSION_SECRET${NC}"
fi
export SESSION_SECRET="$SESSION_SECRET"

# Verify that AIRTABLE_API_KEY is set
if [ -z "$AIRTABLE_API_KEY" ]; then
    echo -e "${RED}Error: AIRTABLE_API_KEY is not set. Please add it as a secret in your Replit environment.${NC}"
    exit 1
fi
echo -e "${GREEN}Using existing AIRTABLE_API_KEY from environment${NC}"

# Change to the TrueAminoStore directory
cd "$REPO_NAME" || exit 1

# Create .env file with necessary environment variables
echo "PORT=5000
HOST=0.0.0.0
NODE_ENV=production
AIRTABLE_API_KEY=${AIRTABLE_API_KEY}
SESSION_SECRET=${SESSION_SECRET}" > .env

echo -e "${GREEN}Created .env file with necessary environment variables${NC}"

# Check if npm dependencies are installed
echo -e "${YELLOW}Installing dependencies...${NC}"
npm install

# Copy favicon into correct locations
echo -e "${YELLOW}Setting up favicons...${NC}"
if [ -f "../attached_assets/favicon-32x32.png" ]; then
    cp "../attached_assets/favicon-32x32.png" ./public/favicon-32x32.png
    cp "../attached_assets/favicon-32x32.png" ./public/favicon-16.png
    cp "../attached_assets/favicon-32x32.png" ./public/favicon-32.png
    cp "../attached_assets/favicon-32x32.png" ./public/images/favicon.png
    convert "../attached_assets/favicon-32x32.png" ./public/favicon.ico
    convert "../attached_assets/favicon-32x32.png" ./public/favicon/favicon.ico
    echo -e "${GREEN}Favicons set up successfully${NC}"
fi

# Create a script to start the server and properly export port
cat > server-start.js << 'EOF'
// This is a wrapper script to ensure the server properly binds to port 5000
const { spawn } = require('child_process');
const http = require('http');

// Start the server process
console.log('Starting the server process...');
const server = spawn('npx', ['tsx', 'server/index.ts'], {
  env: {
    ...process.env,
    PORT: '5000',
    HOST: '0.0.0.0',
    NODE_ENV: 'production',
  },
  stdio: 'inherit'
});

// Function to check if the server is listening on port 5000
function checkServerReady() {
  console.log('Checking if server is ready...');
  http.get('http://localhost:5000', res => {
    console.log(`Server is listening! Status code: ${res.statusCode}`);
  }).on('error', err => {
    console.log('Server not ready yet, retrying in 1 second...');
    setTimeout(checkServerReady, 1000);
  });
}

// Start checking after a 3-second delay
setTimeout(checkServerReady, 3000);

// Handle process termination
process.on('SIGINT', () => {
  server.kill('SIGINT');
  process.exit();
});

server.on('close', (code) => {
  console.log(`Server process exited with code ${code}`);
  process.exit(code);
});
EOF

# Start the production server
echo -e "${GREEN}Starting the application in production mode...${NC}"
exec node server-start.js